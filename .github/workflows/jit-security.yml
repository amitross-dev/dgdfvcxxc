name: Workflows generated by the MVS plan
on:
  workflow_dispatch:
    inputs:
       client_payload:
          description: The Client payload
          required: true
jobs:
  docker-scan:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'docker-scan'
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
    - name: trivy
      uses: jitsecurity-controls/jit-github-action@v3.0.1
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        
        security_control: registry.jit.io/control-trivy-alpine:main
        security_control_args: --quiet config --severity HIGH,CRITICAL -f json --ignorefile /opt/.trivyignore ${WORK_DIR:-.}
        
        dispatch_type: workflow
        context: ${{toJSON(fromJSON(github.event.inputs.client_payload).context)}}
        runner_setup: ${{toJSON(fromJSON(github.event.inputs.client_payload).context.job.runner.setup)}}

  enrich:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'enrich'
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
    - name: enrichment
      uses: jitsecurity-controls/jit-github-action@v3.0.1
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        
        security_control: registry.jit.io/control-enrichment-slim:main
        security_control_args: --path ${WORK_DIR:-.}
        
        dispatch_type: workflow
        context: ${{toJSON(fromJSON(github.event.inputs.client_payload).context)}}
        runner_setup: ${{toJSON(fromJSON(github.event.inputs.client_payload).context.job.runner.setup)}}

  remediation-pr:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'remediation-pr'
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
    - name: remediation-pr
      uses: jitsecurity-controls/jit-github-action@v3.0.1
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        
        security_control: registry.jit.io/open-remediation-pr-alpine:main
        security_control_args: --output-file "/opt/code/jit-report/results.json" --owner ${{fromJSON(github.event.inputs.client_payload).context.asset.owner }} --repo_name ${{fromJSON(github.event.inputs.client_payload).context.asset.asset_name }} --action_id ${{fromJSON(github.event.inputs.client_payload).context.jit_event.action_id }} --finding_id ${{fromJSON(github.event.inputs.client_payload).context.jit_event.finding_id }}
        security_control_output_file: /opt/code/jit-report/results.json
        dispatch_type: workflow
        context: ${{toJSON(fromJSON(github.event.inputs.client_payload).context)}}
        runner_setup: ${{toJSON(fromJSON(github.event.inputs.client_payload).context.job.runner.setup)}}

  secret-detection:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'secret-detection'
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
    - name: gitleaks
      uses: jitsecurity-controls/jit-github-action@v3.0.1
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        
        security_control: registry.jit.io/control-gitleaks-alpine:main
        security_control_args: detect --config $GITLEAKS_CONFIG_FILE_PATH --source ${WORK_DIR:-.} -v --report-format json --report-path $REPORT_FILE --redact --no-git --exit-code 0
        security_control_output_file: /tmp/report.json
        dispatch_type: workflow
        context: ${{toJSON(fromJSON(github.event.inputs.client_payload).context)}}
        runner_setup: ${{toJSON(fromJSON(github.event.inputs.client_payload).context.job.runner.setup)}}
